server:
  port: 8080

spring:
  datasource:
    #    url: jdbc:postgresql://${DB:192.168.180.56:5432/adjustment}
    url: jdbc:postgresql://localhost:5432/testdb
    username: ${DB_USER:postgres}
    password: ${DB_PASS:1234}
  jpa:
    database: POSTGRESQL
    show-sql: true
    hibernate:
      ddl-auto: update

#  r2dbc:
#    url: r2dbc:postgresql://localhost:5432/testdb
#    username: ${DB_USER:postgres}
#    password: ${DB_PASS:1234}
#    pool:
#      validation-query: SELECT 1
#    properties:
#      preparedStatementCacheQueries: 0

  security:
    oauth2:
      client:
        registration:
          messaging-client-oidc:
            client-id: messaging-client
            client-secret: secret
            client-name: messaging-client-oidc
            scope: openid
            provider: spring
            redirect-uri: http://127.0.0.1:8080/login/oauth2/code/{registrationId}
            #http://localhost:8080/login/oauth2/code/{registrationId}
            client-authentication-method: basic
            authorization-grant-type: authorization_code
          messaging-client-authorization-code:
            provider: spring
            client-id: messaging-client
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8080/authorized"
            scope: message.read
            client-name: messaging-client-authorization-code
        provider:
          spring:
            issuer-uri: http://auth-server:9000
#            token-uri: http://localhost:9000/oauth2/token
#            authorization-uri: http://localhost:9000/oauth2/authorize
#            user-info-uri: http://localhost:9000/auth/user/me
#            user-name-attribute: name

#          articles-client-oidc:
#            provider: spring
#            client-id: articles-client
#            client-secret: secret
#            authorization-grant-type: authorization_code
#            redirect-uri: "http://127.0.0.1:8080/login/oauth2/code/{registrationId}"
#            scope: openid
#            client-name: articles-client-oidc
##          articles-client-authorization-code:
##            provider: spring
##            client-id: articles-client
##            client-secret: secret
##            authorization-grant-type: authorization_code
##            redirect-uri: "http://127.0.0.1:8080/authorized"
##            scope: articles.read
##            client-name: articles-client-authorization-code
#        provider:
#          spring:
#            issuer-uri: http://auth-server:9000  #http://auth-server:9000/oauth2/authorize
